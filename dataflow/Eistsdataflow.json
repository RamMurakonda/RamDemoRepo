{
	"name": "Eistsdataflow",
	"properties": {
		"description": "Using exits x",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeDataset",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "OrdersDataset",
						"type": "DatasetReference"
					},
					"name": "Orders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputDatasetCSVfiles",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "Linkedservice_storagedemoramm",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          BirthDate as string,",
				"          Photo as string,",
				"          Notes as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          OrderID as string,",
				"          CustomerID as string,",
				"          EmployeeID as string,",
				"          OrderDate as string,",
				"          ShipperID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Orders",
				"Employee, Orders exists(Employee@EmployeeID == Orders@EmployeeID,",
				"     negate:true,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Emp not  exists in orders table.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}